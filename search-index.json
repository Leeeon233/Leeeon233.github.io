[{"documents":[{"i":1,"t":"","u":"/blog/archive","b":["Blog"]},{"i":2,"t":"如何使用CRDT实现一个简单的多人文本协同应用","u":"/blog/2022/07/25/crdt-toy","b":["Blog"]}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/1",[]],["t/2",[0,0.492]]],"invertedIndex":[["crdt",{"_index":0,"t":{"2":{"position":[[0,23]]}}}]],"pipeline":["stemmer"]}},{"documents":[{"i":4,"t":"什么是 CRDTs","u":"/blog/2022/07/25/crdt-toy","h":"#什么是-crdts","p":2},{"i":6,"t":"CRDTs 的简单实现","u":"/blog/2022/07/25/crdt-toy","h":"#crdts-的简单实现","p":2},{"i":8,"t":"分布式中的顺序","u":"/blog/2022/07/25/crdt-toy","h":"#分布式中的顺序","p":2},{"i":10,"t":"只确定逻辑顺序就够了吗","u":"/blog/2022/07/25/crdt-toy","h":"#只确定逻辑顺序就够了吗","p":2},{"i":12,"t":"","u":"/blog/2022/07/25/crdt-toy","h":"","p":2}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/4",[0,0.226,1,0.688]],["t/6",[0,0.226,1,0.688]],["t/8",[0,0.309]],["t/10",[0,0.309]],["t/12",[]]],"invertedIndex":[["",{"_index":0,"t":{"4":{"position":[[0,3]]},"6":{"position":[[6,5]]},"8":{"position":[[0,7]]},"10":{"position":[[0,11]]}}}],["crdt",{"_index":1,"t":{"4":{"position":[[4,5]]},"6":{"position":[[0,5]]}}}]],"pipeline":["stemmer"]}},{"documents":[{"i":3,"t":"这篇博客将简要介绍CRDTs（Conflict-free Replicated Data Types）的基本概念以及从开发者的角度着重介绍简单的 CRDTs 的实现流程与细节（基于RGA 算法），并且基于这些知识点实现一个 rust+wasm 的简单 web 文本协作 demo。 项目地址: https://github.com/Leeeon233/crdt-toy demo 地址: https://leonzhao.cn/crdt-toy","s":"如何使用CRDT实现一个简单的多人文本协同应用","u":"/blog/2022/07/25/crdt-toy","h":"","p":2},{"i":5,"t":"对于 CRDTs 可以优先通过看[CRDT 简介]、[CRDT 原理]这些文章了解。 CRDTs 是近些年开始备受关注的一种用来处理分布式系统上的协同可用性的数据结构。它在可用性与分区容错性的基础上，不提供完美的一致性而是提供强最终一致性。下面的例子可以帮助我们理解什么是强最终一致性。 比如当前有Alice和Bob两个同学在各自的电脑上共同编辑同一份文档，Alice 写入了Hello CRDT，Bob 写入了Hello crdt。 但在此时 Alice 其实并没有办法知晓 Bob 可能在同一时刻也写入了Hello crdt的文本，并不像真正本地那样，完全意义上的在编辑同一份文件（一致性）。 只有当他们进行了一次同步通信后，Alice 或者 Bob 才会知晓对方编辑了什么。crdt 所提供的强最终一致性意义并不是让多人协同真正地像大家就在同一页纸上写字一样，而是大家可以各自地编辑自己的内容，尽管在多次同步的过程中会产生冲突，但 crdt 可以保证所有的消息都被接收后，最终的内容将会是多方一致的，哪怕可能最终冲突解决后的版本并不是真正所期待的结果。 对于 Alice 和 Bob 的例子，在输入Hello CRDT和Hello crdt时可能进行了多次的同步操作，最终展现在 Alice 和 Bob 眼前的文本根据不同的 crdt 算法和冲突解决策略可能变得不同。也许是Hello crdt、Hello CRDTHellocrdt或Hello CRDTcrdt等等都有可能，但是最终在 Alice 和 Bob 眼前的结果将会是完全一致的其中一种结果。","s":"什么是 CRDTs","u":"/blog/2022/07/25/crdt-toy","h":"#什么是-crdts","p":2},{"i":7,"t":"我们就以多人的文本内容协作作为场景来尝试实现一个基于 op 的 crdt 的编辑器。下面是编辑器 demo 的效果展示。分别有Client1和Client2两个客户端在共同编辑一份文档。 Final Text的文本区域展示的当前同步后的结果。Client1和Client2也可以点击按钮表示进行同步。 首先我们需要确定这样一个简单的编辑器，用户会有哪些操作(op)。思考一下，非常简单地就可以得出一共有两种操作： 插入 删除 修改（可以简单地视为先删除再插入的组合）","s":"CRDTs 的简单实现","u":"/blog/2022/07/25/crdt-toy","h":"#crdts-的简单实现","p":2},{"i":9,"t":"那么我们还是回到 Alice 和 Bob 的例子，我们提供了第一版的编辑器给他们，但是由于我们技术还未成熟，要求他们只能插入内容还不能删除。Alice 和 Bob 同意参与到我们的迭代测试中去。他们还是分别一次输入了 Hello CRDT和Hello crdt。这时他们发起了同步。 Alice 给 Bob 打了个电话，发现自己的屏幕上结果是Hello CRDTHello crdt而 Bob 的屏幕上结果是Hello crdtHello CRDT。怎么会这样？他们把测试结果反馈给了我们。 原来我们第一版系统都把新接收到的插入操作当作了后发生的事情，Alice 的编辑器把 Bob 的内容加在了后面，Bob 的编辑器也是如此。这和我们一开始所强调的强最终一致性可不符。我们希望无论事件被怎样创建和接收，只要操作集合是一致的，那么最终结果应该一样。 既然已经知道了问题所在，那么就没什么问题了。我们只需要让每个用户之间有一个固定的顺序就可以了，可以为每一个编辑器客户端分配一个Client ID，以ID的大小顺序来作为操作的顺序。我们很快发布了 v2.0 版本，让客户端 ID 越大认为操作越先发生，并且分配 Alice 的客户端版本为1 Bob 的客户端版本为2 提供给了 Alice 和 Bob 帮忙测试使用。 这回没有问题了，Alice 和 Bob 的编辑器上显示的都是Hello crdtHello CRDT文本。 但随着进一步使用，Alice 和 Bob 又发现问题了。这次 Bob 先输入了one 然后又输入了two Alice 先输入了three 又输入了four 然后他们进行了同步，这次每个人都发送了两个插入操作。 现在 Bob 的屏幕上显示的是one two fourthree 而 Alice 屏幕上显示的却是one two three four，正常来说one two three four才是他们想要的结果。 我们发现 Alice 向 Bob 同步的内容发生了顺序的改变，有着分布式经验的我们立刻想到，可能是网络延迟的原因，导致 Alice 的第二个操作早于第一个操作被 Bob 的客户端接收到造成了顺序的不一致。 既然已经知道了问题所在，那么就没什么问题了。我们可以新增一个逻辑时间戳，也就是Lamport Timestamp Lamport Timestamp 的算法很简单1 每个进程维护一个counter 本地每发生一个事件就将counter + 1，并将事件的时间戳设置为counter值 每当进程发送一个消息，就将本地counter + 1，并将最新的counter值附带在消息上 当进程收到消息后，让自己的counter = max(counter, message.counter) + 1 我们在原有的ClientId基础上进行了扩展，构建了一个EventId，其中包括了ClientId和Lamport Timestamp两部分，这样事件的发生顺序就可以与接收到的顺序无关了。 我们抓紧更新了 v3.0 版本的编辑器给到 Alice 和 Bob，心想肯定没问题了。","s":"分布式中的顺序","u":"/blog/2022/07/25/crdt-toy","h":"#分布式中的顺序","p":2},{"i":11,"t":"Alice 和 Bob 拿到 v3.0 的编辑器那肯定先尝试了一下刚刚失败的例子 果然更新后就没问题了。但 Bob 这回想着也不能一直只在后面加字符，于是 Bob 在编辑器的最前面插入了zero ，并且同步给了 Alice。发现同步之后结果怎么又不一样了。Alice 的结果是one two three fourzero ，Bob 输入的zero 怎么在后面啊？ Alice 和 Bob 开始不耐烦了起来，你们这个编辑器到底行不行？我们听到这个消息，赶快赶过来了解情况。 之前我们给每个插入操作分配了一个EventId，能够确定所有的插入操作的发生顺序。但是我们没有想到操作的顺序在文本这个场景下不能代表操作的位置。我们觉得不能再这样遇到什么问题解决什么问题了，需要好好想清楚编辑器这个问题，包括一直没被考虑的删除操作。 目前我们一共面临下面几个问题： 文本的插入和删除操作是需要确定插入和删除位置的，该如何确定 文本可能在任意的位置进行插入和删除，我们应该需要确定操作的最小单位 简单的 Op 列表可能不太容易满足我们的要求了，该使用怎样的数据结构呢 面临的问题还有些抽象，我们先通过一部分的例子来模拟一下吧。 看到上面的图，我们的思路就清晰了很多。文本编辑里面最小操作的单位肯定是字符这点毋庸置疑了。至于确定位置这点，我们观察图中第一排的全部操作描述 在编辑器中插入 a 在 a 后面输入 b 在 b 后面输入 c 删除字符 b 在 a 的后面插入 d 那么位置就完全可以通过当前文本内容，看接下来要插入或者删除的字符是基于目前文本的哪个字符做的操作就可以确定了。这样不同的字符之间好像就有了依赖关系，那数据结构是不是可以使用树形结构了？ 我们突然感觉灵感来了。","s":"只确定逻辑顺序就够了吗","u":"/blog/2022/07/25/crdt-toy","h":"#只确定逻辑顺序就够了吗","p":2},{"i":13,"t":"如何设计 CRDT 算法-Zxch3n↩","s":"如何使用CRDT实现一个简单的多人文本协同应用","u":"/blog/2022/07/25/crdt-toy","h":"","p":2}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/3",[0,1.93,1,1.93,2,1.93,3,1.93,4,1.93,5,0.302,6,1.93,7,0.142,8,1.93,9,1.93,10,1.644,11,1.93,12,2.46,13,1.93]],["t/5",[5,0.468,7,0.149,14,1.457,15,1.791,16,1.457,17,1.205,18,1.205,19,0.974,20,1.457,21,1.457,22,1.457]],["t/7",[5,0.332,7,0.148,10,1.419,23,1.745,24,2.123,25,2.123,26,2.123]],["t/9",[5,0.315,7,0.149,15,1.345,17,1.26,18,1.29,19,0.606,27,1.772,28,0.907,29,0.907,30,0.907,31,0.907,32,1.772,33,0.907,34,1.184,35,1.345,36,1.184,37,1.431,38,0.907,39,0.907,40,1.431,41,1.772,42,2.012,43,0.907,44,0.907,45,0.907,46,0.907,47,0.907,48,0.606]],["t/11",[7,0.155,17,0.899,18,1.193,23,0.946,34,0.946,35,0.946,36,0.946,48,0.946,49,1.997,50,1.416,51,1.416,52,1.416,53,2.314,54,1.416,55,1.416]],["t/13",[5,0.381,7,0.136,56,2.436]]],"invertedIndex":[["",{"_index":7,"t":{"3":{"position":[[94,17],[122,3],[130,4],[141,5],[190,3]]},"5":{"position":[[0,2],[32,10],[49,94],[218,4],[229,9],[321,2],[345,73],[424,55],[480,2],[489,1],[549,1],[555,10],[654,1],[660,20]]},"7":{"position":[[0,26],[30,1],[37,11],[207,2],[210,2],[213,20]]},"9":{"position":[[0,8],[15,1],[76,1],[82,26],[148,1],[282,5],[305,69],[478,7],[489,15],[533,4],[544,1],[550,7],[572,1],[627,1],[633,9],[690,26],[717,2],[750,1],[818,4],[829,1],[835,42],[884,14],[903,17],[1039,1],[1086,1],[1131,1],[1163,1],[1262,7],[1275,8],[1290,1]]},"11":{"position":[[6,1],[12,2],[20,20],[41,12],[58,19],[98,7],[174,7],[188,1],[194,41],[361,15],[377,29],[407,33],[441,3],[448,28],[477,29],[507,70],[578,7],[588,1],[592,4],[599,1],[603,4],[610,4],[617,1],[621,5],[629,92],[722,11]]},"13":{"position":[[0,4],[10,2]]}}}],["1",{"_index":32,"t":{"9":{"position":[[511,8],[996,7],[1165,1]]}}}],["1，并将事件的时间戳设置为counter",{"_index":43,"t":{"9":{"position":[[1041,21]]}}}],["1，并将最新的counter",{"_index":44,"t":{"9":{"position":[[1088,21]]}}}],["2",{"_index":33,"t":{"9":{"position":[[524,8]]}}}],["alic",{"_index":17,"t":{"5":{"position":[[223,5],[299,21],[483,5],[543,5],[648,5]]},"9":{"position":[[9,5],[21,54],[142,5],[246,35],[505,5],[538,5],[558,13],[612,14],[665,5],[752,5],[823,5],[878,5],[1284,5]]},"11":{"position":[[0,5],[182,5]]}}}],["alice。发现同步之后结果怎么又不一样了。alic",{"_index":50,"t":{"11":{"position":[[106,27]]}}}],["alice和bob两个同学在各自的电脑上共同编辑同一份文档，alic",{"_index":14,"t":{"5":{"position":[[144,40]]}}}],["b",{"_index":53,"t":{"11":{"position":[[597,1],[601,1],[615,1]]}}}],["bob",{"_index":18,"t":{"5":{"position":[[239,3],[324,3],[491,3],[551,3],[656,3]]},"9":{"position":[[17,3],[78,3],[150,3],[193,3],[288,3],[292,12],[520,3],[546,3],[574,3],[629,3],[643,3],[720,3],[831,3],[899,3],[1292,13]]},"11":{"position":[[8,3],[54,3],[78,3],[161,4],[190,3]]}}}],["c",{"_index":54,"t":{"11":{"position":[[608,1]]}}}],["client",{"_index":28,"t":{"9":{"position":[[375,69]]}}}],["client1和client2",{"_index":24,"t":{"7":{"position":[[54,39]]}}}],["clientid基础上进行了扩展，构建了一个eventid，其中包括了clientid和lamport",{"_index":47,"t":{"9":{"position":[[1167,57]]}}}],["counter",{"_index":42,"t":{"9":{"position":[[1004,15],[1020,18],[1063,22],[1110,20]]}}}],["crdt",{"_index":5,"t":{"3":{"position":[[73,5]]},"5":{"position":[[3,5],[9,12],[22,9],[43,5],[212,5],[260,38],[328,16],[419,4],[519,23],[566,4]]},"7":{"position":[[32,4]]},"9":{"position":[[126,15],[187,5],[220,25],[604,7]]},"13":{"position":[[5,4]]}}}],["crdtcrdt",{"_index":22,"t":{"5":{"position":[[627,20]]}}}],["crdthello",{"_index":27,"t":{"9":{"position":[[177,9],[210,9],[594,9]]}}}],["crdthellocrdt或hello",{"_index":21,"t":{"5":{"position":[[607,19]]}}}],["crdts（conflict",{"_index":0,"t":{"3":{"position":[[0,23]]}}}],["crdt、hello",{"_index":20,"t":{"5":{"position":[[596,10]]}}}],["crdt和hello",{"_index":19,"t":{"5":{"position":[[508,10]]},"9":{"position":[[115,10]]}}}],["crdt，bob",{"_index":16,"t":{"5":{"position":[[194,8]]}}}],["d",{"_index":55,"t":{"11":{"position":[[627,1]]}}}],["data",{"_index":3,"t":{"3":{"position":[[40,4]]}}}],["demo",{"_index":10,"t":{"3":{"position":[[135,5],[185,4]]},"7":{"position":[[49,4]]}}}],["eventid",{"_index":52,"t":{"11":{"position":[[236,124]]}}}],["final",{"_index":25,"t":{"7":{"position":[[94,5]]}}}],["four",{"_index":37,"t":{"9":{"position":[[681,8],[803,14]]}}}],["fourthre",{"_index":38,"t":{"9":{"position":[[740,9]]}}}],["fourzero",{"_index":51,"t":{"11":{"position":[[152,8]]}}}],["four，正常来说on",{"_index":39,"t":{"9":{"position":[[780,12]]}}}],["free",{"_index":1,"t":{"3":{"position":[[24,4]]}}}],["hello",{"_index":15,"t":{"5":{"position":[[185,8],[203,8],[243,16],[495,12],[571,24]]},"9":{"position":[[109,5],[154,22],[197,12],[578,15]]}}}],["https://github.com/leeeon233/crdt",{"_index":11,"t":{"3":{"position":[[147,33]]}}}],["https://leonzhao.cn/crdt",{"_index":13,"t":{"3":{"position":[[194,24]]}}}],["id",{"_index":31,"t":{"9":{"position":[[486,2]]}}}],["id，以id",{"_index":29,"t":{"9":{"position":[[445,27]]}}}],["lamport",{"_index":40,"t":{"9":{"position":[[921,46],[978,7]]}}}],["max(count",{"_index":45,"t":{"9":{"position":[[1133,12]]}}}],["message.count",{"_index":46,"t":{"9":{"position":[[1146,16]]}}}],["on",{"_index":34,"t":{"9":{"position":[[647,7],[724,11],[758,11]]},"11":{"position":[[134,7]]}}}],["op",{"_index":23,"t":{"7":{"position":[[27,2],[151,55]]},"11":{"position":[[445,2]]}}}],["replic",{"_index":2,"t":{"3":{"position":[[29,10]]}}}],["rga",{"_index":6,"t":{"3":{"position":[[79,14]]}}}],["rust+wasm",{"_index":8,"t":{"3":{"position":[[112,9]]}}}],["text的文本区域展示的当前同步后的结果。client1和client2",{"_index":26,"t":{"7":{"position":[[100,50]]}}}],["three",{"_index":36,"t":{"9":{"position":[[671,9],[774,5],[797,5]]},"11":{"position":[[146,5]]}}}],["timestamp",{"_index":41,"t":{"9":{"position":[[968,9],[986,9],[1225,36]]}}}],["toy",{"_index":12,"t":{"3":{"position":[[181,3],[219,3]]}}}],["two",{"_index":35,"t":{"9":{"position":[[655,9],[736,3],[770,3],[793,3]]},"11":{"position":[[142,3]]}}}],["type",{"_index":4,"t":{"3":{"position":[[45,27]]}}}],["v2.0",{"_index":30,"t":{"9":{"position":[[473,4]]}}}],["v3.0",{"_index":48,"t":{"9":{"position":[[1270,4]]},"11":{"position":[[15,4]]}}}],["web",{"_index":9,"t":{"3":{"position":[[126,3]]}}}],["zero",{"_index":49,"t":{"11":{"position":[[82,15],[166,7]]}}}],["zxch3n",{"_index":56,"t":{"13":{"position":[[13,7]]}}}]],"pipeline":["stemmer"]}}]