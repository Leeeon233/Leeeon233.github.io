[{"documents":[{"i":1,"t":"","u":"/blog/archive","b":["Blog"]},{"i":2,"t":"如何使用CRDT实现一个简单的多人文本协同应用","u":"/blog/2022/07/25/crdt-toy","b":["Blog"]}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/1",[]],["t/2",[0,0.492]]],"invertedIndex":[["crdt",{"_index":0,"t":{"2":{"position":[[0,23]]}}}]],"pipeline":["stemmer"]}},{"documents":[{"i":4,"t":"什么是 CRDTs","u":"/blog/2022/07/25/crdt-toy","h":"#什么是-crdts","p":2},{"i":6,"t":"CRDTs 的简单实现","u":"/blog/2022/07/25/crdt-toy","h":"#crdts-的简单实现","p":2},{"i":8,"t":"分布式中的顺序","u":"/blog/2022/07/25/crdt-toy","h":"#分布式中的顺序","p":2},{"i":10,"t":"只确定逻辑顺序就够了吗","u":"/blog/2022/07/25/crdt-toy","h":"#只确定逻辑顺序就够了吗","p":2},{"i":12,"t":"文本编辑好像就是棵树","u":"/blog/2022/07/25/crdt-toy","h":"#文本编辑好像就是棵树","p":2},{"i":14,"t":"删除了字符，它就不存在了吗？","u":"/blog/2022/07/25/crdt-toy","h":"#删除了字符它就不存在了吗","p":2},{"i":16,"t":"CRDTs 能够达成多人的操作协同，那么代价呢？","u":"/blog/2022/07/25/crdt-toy","h":"#crdts-能够达成多人的操作协同那么代价呢","p":2},{"i":18,"t":"参考资料","u":"/blog/2022/07/25/crdt-toy","h":"#参考资料","p":2}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/4",[0,0.048,1,0.796]],["t/6",[0,0.048,1,0.796]],["t/8",[0,0.064]],["t/10",[0,0.064]],["t/12",[0,0.064]],["t/14",[0,0.064]],["t/16",[0,0.048,1,0.796]],["t/18",[0,0.064]]],"invertedIndex":[["",{"_index":0,"t":{"4":{"position":[[0,3]]},"6":{"position":[[6,5]]},"8":{"position":[[0,7]]},"10":{"position":[[0,11]]},"12":{"position":[[0,10]]},"14":{"position":[[0,14]]},"16":{"position":[[6,18]]},"18":{"position":[[0,4]]}}}],["crdt",{"_index":1,"t":{"4":{"position":[[4,5]]},"6":{"position":[[0,5]]},"16":{"position":[[0,5]]}}}]],"pipeline":["stemmer"]}},{"documents":[{"i":3,"t":"这篇博客将简要介绍CRDTs（Conflict-free Replicated Data Types）的基本概念以及从开发者的角度着重介绍简单的 CRDTs 的实现流程与细节（基于RGA 算法），并且基于这些知识点实现一个 rust+wasm 的简单 web 文本协作 demo。 项目地址: https://github.com/Leeeon233/crdt-toy demo 地址: https://leonzhao.cn/crdt-toy 实现思路参考了 crdt-edit1","s":"如何使用CRDT实现一个简单的多人文本协同应用","u":"/blog/2022/07/25/crdt-toy","h":"","p":2},{"i":5,"t":"对于 CRDTs 可以优先通过看[CRDT 简介2]、[CRDT 原理3]这些文章了解。 CRDTs 是近些年开始备受关注的一种用来处理分布式系统上的协同可用性的数据结构。它在可用性与分区容错性的基础上，不提供完美的一致性而是提供强最终一致性。下面的例子可以帮助我们理解什么是强最终一致性。 比如当前有Alice和Bob两个同学在各自的电脑上共同编辑同一份文档，Alice 写入了Hello CRDT，Bob 写入了Hello crdt。 但在此时 Alice 其实并没有办法知晓 Bob 可能在同一时刻也写入了Hello crdt的文本，并不像真正本地那样，完全意义上的在编辑同一份文件（一致性）。 只有当他们进行了一次同步通信后，Alice 或者 Bob 才会知晓对方编辑了什么。crdt 所提供的强最终一致性意义并不是让多人协同真正地像大家就在同一页纸上写字一样，而是大家可以各自地编辑自己的内容，尽管在多次同步的过程中会产生冲突，但 crdt 可以保证所有的消息都被接收后，最终的内容将会是多方一致的，哪怕可能最终冲突解决后的版本并不是真正所期待的结果。 对于 Alice 和 Bob 的例子，在输入Hello CRDT和Hello crdt时可能进行了多次的同步操作，最终展现在 Alice 和 Bob 眼前的文本根据不同的 crdt 算法和冲突解决策略可能变得不同。也许是Hello crdt、Hello CRDTHellocrdt或Hello CRDTcrdt等等都有可能，但是最终在 Alice 和 Bob 眼前的结果将会是完全一致的其中一种结果。","s":"什么是 CRDTs","u":"/blog/2022/07/25/crdt-toy","h":"#什么是-crdts","p":2},{"i":7,"t":"我们就以多人的文本内容协作作为场景来尝试实现一个基于 op 的 crdt 的编辑器。下面是编辑器 demo 的效果展示。分别有Client1和Client2两个客户端在共同编辑一份文档。 Final Text的文本区域展示的当前同步后的结果。Client1和Client2也可以点击按钮表示进行同步。 首先我们需要确定这样一个简单的编辑器，用户会有哪些操作(op)。思考一下，非常简单地就可以得出一共有两种操作： 插入 删除 修改（可以简单地视为先删除再插入的组合）","s":"CRDTs 的简单实现","u":"/blog/2022/07/25/crdt-toy","h":"#crdts-的简单实现","p":2},{"i":9,"t":"那么我们还是回到 Alice 和 Bob 的例子，我们提供了第一版的编辑器给他们，但是由于我们技术还未成熟，要求他们只能插入内容还不能删除。Alice 和 Bob 同意参与到我们的迭代测试中去。他们还是分别一次输入了 Hello CRDT和Hello crdt。这时他们发起了同步。 Alice 给 Bob 打了个电话，发现自己的屏幕上结果是Hello CRDTHello crdt而 Bob 的屏幕上结果是Hello crdtHello CRDT。怎么会这样？他们把测试结果反馈给了我们。 原来我们第一版系统都把新接收到的插入操作当作了后发生的事情，Alice 的编辑器把 Bob 的内容加在了后面，Bob 的编辑器也是如此。这和我们一开始所强调的强最终一致性可不符。我们希望无论事件被怎样创建和接收，只要操作集合是一致的，那么最终结果应该一样。 既然已经知道了问题所在，那么就没什么问题了。我们只需要让每个用户之间有一个固定的顺序就可以了，可以为每一个编辑器客户端分配一个Client ID，以ID的大小顺序来作为操作的顺序。我们很快发布了 v2.0 版本，让客户端 ID 越大认为操作越先发生，并且分配 Alice 的客户端版本为1 Bob 的客户端版本为2 提供给了 Alice 和 Bob 帮忙测试使用。 这回没有问题了，Alice 和 Bob 的编辑器上显示的都是Hello crdtHello CRDT文本。 但随着进一步使用，Alice 和 Bob 又发现问题了。这次 Bob 先输入了one 然后又输入了two Alice 先输入了three 又输入了four 然后他们进行了同步，这次每个人都发送了两个插入操作。 现在 Bob 的屏幕上显示的是one two fourthree 而 Alice 屏幕上显示的却是one two three four，正常来说one two three four才是他们想要的结果。 我们发现 Alice 向 Bob 同步的内容发生了顺序的改变，有着分布式经验的我们立刻想到，可能是网络延迟的原因，导致 Alice 的第二个操作早于第一个操作被 Bob 的客户端接收到造成了顺序的不一致。 既然已经知道了问题所在，那么就没什么问题了。我们可以新增一个逻辑时间戳，也就是Lamport Timestamp Lamport Timestamp 的算法很简单4 每个进程维护一个counter 本地每发生一个事件就将counter + 1，并将事件的时间戳设置为counter值 每当进程发送一个消息，就将本地counter + 1，并将最新的counter值附带在消息上 当进程收到消息后，让自己的counter = max(counter, message.counter) + 1 我们在原有的ClientId基础上进行了扩展，构建了一个EventId，其中包括了ClientId和Lamport Timestamp两部分，这样事件的发生顺序就可以与接收到的顺序无关了。 我们抓紧更新了 v3.0 版本的编辑器给到 Alice 和 Bob，心想肯定没问题了。","s":"分布式中的顺序","u":"/blog/2022/07/25/crdt-toy","h":"#分布式中的顺序","p":2},{"i":11,"t":"Alice 和 Bob 拿到 v3.0 的编辑器那肯定先尝试了一下刚刚失败的例子 果然更新后就没问题了。但 Bob 这回想着也不能一直只在后面加字符，于是 Bob 在编辑器的最前面插入了zero ，并且同步给了 Alice。发现同步之后结果怎么又不一样了。Alice 的结果是one two three fourzero ，Bob 输入的zero 怎么在后面啊？ Alice 和 Bob 开始不耐烦了起来，你们这个编辑器到底行不行？我们听到这个消息，赶快赶过来了解情况。 之前我们给每个插入操作分配了一个EventId，能够确定所有的插入操作的发生顺序。但是我们没有想到操作的顺序在文本这个场景下不能代表操作的位置。我们觉得不能再这样遇到什么问题解决什么问题了，需要好好想清楚编辑器这个问题，包括一直没被考虑的删除操作。 目前我们一共面临下面几个问题： 文本的插入和删除操作是需要确定插入和删除位置的，该如何确定 文本可能在任意的位置进行插入和删除，我们应该需要确定操作的最小单位 简单的 Op 列表可能不太容易满足我们的要求了，该使用怎样的数据结构呢 面临的问题还有些抽象，我们先通过一部分的例子来模拟一下吧。 看到上面的图，我们的思路就清晰了很多。文本编辑里面最小操作的单位肯定是字符这点毋庸置疑了。至于确定位置这点，我们观察图中第一排的全部操作描述 在编辑器中插入 a 在 a 后面输入 b 在 b 后面输入 c 删除字符 b 在 a 后面插入 d 那么位置就完全可以通过当前文本内容，看接下来要插入或者删除的字符是基于目前文本的哪个字符做的操作就可以确定了。这样不同的字符之间好像就有了依赖关系，那数据结构是不是可以使用树形结构了？ 我们突然感觉灵感来了。","s":"只确定逻辑顺序就够了吗","u":"/blog/2022/07/25/crdt-toy","h":"#只确定逻辑顺序就够了吗","p":2},{"i":13,"t":"如果我们把初始空文本当作树的根节点（root）的话，那么插入字符a就是a是root的子节点。在a后面插入b，那b就是a的子节点。我们把上面的示例画一下： 把输入字符的过程可视化之后，我们看到过程 1 和 2 好像都没什么问题，全部都是在按顺序插入字符，前一个字符作为后一个字符的父节点，从根节点遍历下来就能还原原始文档。但是接下来我们好像遇到两个不是太明朗的操作。 多个子节点时遍历顺序是否有要求 删除字符时是否要把节点删除 这回实在不好意思再请 Alice 和 Bob 帮我们找问题了，就我和你来自己先多测测吧。第一个问题看起来还算简单 我们不断模拟向a后面加入文本，结果都是越后面加入的字符，越显示在前面。在前面测试分布式同步的时候我们已经可以通过EventId全局地确定顺序了，那么全部子节点的顺序就可以通过EventId进行排序，越新的EventId将在子节点中越早被遍历。","s":"文本编辑好像就是棵树","u":"/blog/2022/07/25/crdt-toy","h":"#文本编辑好像就是棵树","p":2},{"i":15,"t":"接着我们模拟了几次协作时删除字符的情况，比如这次我先输入了ab你输入了c，之后我们进行了一次同步，我们的结果最后都是abc。 你可能会有疑问，为什么是abc，而不是cab？ 这里我们使用假设 你的ClientId是1 我的ClientId是2 ClientId越大 crdt 认为越先发生 我们详细看一下abc的合并过程，现在我收到了全部的 crdts 的 op： 根节点插入 a EventId(counter: 0, client_id: 2) a 节点插入 b EventId(counter: 1, client_id: 2) 根节点插入 c EventId(counter: 0, client_id: 1) 根据刚刚的结论，op1 和 op3 都是counter为 0 的 op，但是 op1 的ClientId更大，在假设前提下会被认为优先发生。那么整个 op 顺序就会变成 132，即结果的abc。 紧接着我删除了b，而你在b的后面输入了d，然后我们都发起了同步请求。 现在好像遇到了问题，我都已经把b删掉了，那么该怎么同步你要把d插入在b后面的操作呢？ 我静静地整理了一下思路，我删除了b，但于此同时的你或者其他人仍可能在b后面输入一些字符，这也就是b仍可能是其他子树的父节点。其他节点仍然可能会依赖于它。所以我们在删除操作时不可能将真正的树节点删除。 再来想想文本展示时，就是一个树的遍历过程。只要不在编辑器上显示这个字符那么使用编辑器的用户就完全可以认为这个字符被删除了。所以我们只需要给每个节点增加一个标志，表示这个节点是不是被删除就可以了。 提示 上面提到的为了保留树的完整结构，不删除节点，而是添加标志的方式就是一种墓碑机制 现在我们编辑器的结果就都会是adc，满足 crdts 所要求的强最终一致性。我们来遍历一遍刚刚所形成的文本树：","s":"删除了字符，它就不存在了吗？","u":"/blog/2022/07/25/crdt-toy","h":"#删除了字符它就不存在了吗","p":2},{"i":17,"t":"我们把最终的 v0.4 版本编辑器给到了 Alice 和 Bob，Alice 和 Bob 会有什么反馈呢？ 我们来等待下一篇，看看 Alice 和 Bob 会不会有什么抱怨。","s":"CRDTs 能够达成多人的操作协同，那么代价呢？","u":"/blog/2022/07/25/crdt-toy","h":"#crdts-能够达成多人的操作协同那么代价呢","p":2},{"i":19,"t":"https://github.com/wangdashuaihenshuai/crdt-edit↩ CRDT 简介↩ A CRDT Primer Part I: Defanging Order Theory↩ 如何设计 CRDT 算法-Zxch3n↩","s":"参考资料","u":"/blog/2022/07/25/crdt-toy","h":"#参考资料","p":2}],"index":{"version":"2.3.9","fields":["t"],"fieldVectors":[["t/3",[0,2.234,1,2.234,2,2.234,3,2.234,4,2.234,5,0.661,6,2.234,7,0.099,8,2.234,9,2.234,10,2.127,11,2.234,12,2.911,13,2.234,14,2.234]],["t/5",[5,0.819,7,0.102,15,1.731,16,1.731,17,1.731,18,2.379,19,1.731,20,1.026,21,1.026,22,1.265,23,1.731,24,1.731,25,1.731]],["t/7",[5,0.585,7,0.102,10,1.881,26,1.762,27,2.575,28,2.575,29,2.575]],["t/9",[5,0.546,7,0.103,18,1.757,20,1.072,21,1.1,22,0.774,30,2.107,31,1.059,32,1.059,33,1.059,34,1.059,35,0.935,36,0.586,37,1.54,38,1.757,39,1.54,40,1.689,41,1.059,42,1.059,43,1.689,44,2.107,45,1.059,46,1.757,47,1.059,48,1.059,49,1.059,50,1.059,51,1.059,52,0.774]],["t/11",[7,0.107,20,0.755,21,1.014,26,0.929,37,1.227,38,1.227,39,1.227,52,1.227,53,2.395,54,1.679,55,1.679,56,1.679,57,2.04,58,1.227,59,1.679]],["t/13",[7,0.104,20,0.799,21,0.799,35,1.403,36,1.403,60,2.536,61,2.536]],["t/15",[5,0.627,7,0.101,26,1.528,35,1.307,36,1.307,46,1.203,57,1.203,58,1.203,62,1.647,63,1.647,64,1.647,65,1.647,66,2.362,67,1.647,68,2.761,69,2.761,70,2.761,71,2.362,72,1.647,73,1.647,74,1.647,75,1.647,76,1.647,77,1.647]],["t/17",[7,0.104,20,0.994,21,0.994,78,2.536,79,2.536]],["t/19",[5,0.78,7,0.093,80,2.536,81,2.536,82,2.536,83,2.536,84,2.536,85,2.536,86,2.536,87,2.536]]],"invertedIndex":[["",{"_index":7,"t":{"3":{"position":[[94,17],[122,3],[130,4],[141,5],[190,3],[223,7]]},"5":{"position":[[0,2],[51,94],[220,4],[231,9],[323,2],[347,73],[426,55],[482,2],[491,1],[551,1],[557,10],[656,1],[662,20]]},"7":{"position":[[0,26],[30,1],[37,11],[207,2],[210,2],[213,20]]},"9":{"position":[[0,8],[15,1],[76,1],[82,26],[148,1],[282,5],[305,69],[478,7],[489,15],[533,4],[544,1],[550,7],[572,1],[627,1],[633,9],[690,26],[717,2],[750,1],[818,4],[829,1],[835,42],[884,14],[903,17],[1039,1],[1086,1],[1131,1],[1163,1],[1262,7],[1275,8],[1290,1]]},"11":{"position":[[6,1],[12,2],[20,20],[41,12],[58,19],[98,7],[174,7],[188,1],[194,41],[361,15],[377,29],[407,33],[441,3],[448,28],[477,29],[507,70],[578,7],[588,1],[592,4],[599,1],[603,4],[610,4],[617,1],[621,4],[628,92],[721,11]]},"13":{"position":[[77,20],[100,1],[104,78],[183,15],[199,13],[213,10],[230,1],[236,33]]},"15":{"position":[[87,8],[138,6],[177,1],[183,5],[227,4],[268,5],[322,1],[341,1],[388,6],[586,97],[684,2],[687,39],[754,28]]},"17":{"position":[[0,6],[12,8],[27,1],[39,1],[45,8],[54,11],[72,1],[78,9]]},"19":{"position":[[55,3],[105,4],[115,2]]}}}],["0",{"_index":69,"t":{"15":{"position":[[208,2],[293,2],[339,1]]}}}],["1",{"_index":35,"t":{"9":{"position":[[511,8],[1165,1]]},"13":{"position":[[98,1]]},"15":{"position":[[251,2],[307,2]]}}}],["132，即结果的abc",{"_index":73,"t":{"15":{"position":[[395,12]]}}}],["1，并将事件的时间戳设置为counter",{"_index":47,"t":{"9":{"position":[[1041,21]]}}}],["1，并将最新的counter",{"_index":48,"t":{"9":{"position":[[1088,21]]}}}],["2",{"_index":36,"t":{"9":{"position":[[524,8]]},"13":{"position":[[102,1]]},"15":{"position":[[222,2],[265,2]]}}}],["2]、[crdt",{"_index":15,"t":{"5":{"position":[[22,10]]}}}],["3",{"_index":16,"t":{"5":{"position":[[33,11]]}}}],["4",{"_index":45,"t":{"9":{"position":[[996,7]]}}}],["abc",{"_index":67,"t":{"15":{"position":[[145,25]]}}}],["abc，而不是cab",{"_index":63,"t":{"15":{"position":[[63,23]]}}}],["ab你输入了c，之后我们进行了一次同步，我们的结果最后都是abc",{"_index":62,"t":{"15":{"position":[[0,62]]}}}],["adc",{"_index":77,"t":{"15":{"position":[[727,20]]}}}],["alic",{"_index":20,"t":{"5":{"position":[[225,5],[301,21],[485,5],[545,5],[650,5]]},"9":{"position":[[9,5],[21,54],[142,5],[246,35],[505,5],[538,5],[558,13],[612,14],[665,5],[752,5],[823,5],[878,5],[1284,5]]},"11":{"position":[[0,5],[182,5]]},"13":{"position":[[224,5]]},"17":{"position":[[21,5],[66,5]]}}}],["alice。发现同步之后结果怎么又不一样了。alic",{"_index":54,"t":{"11":{"position":[[106,27]]}}}],["alice和bob两个同学在各自的电脑上共同编辑同一份文档，alic",{"_index":17,"t":{"5":{"position":[[146,40]]}}}],["a后面加入文本，结果都是越后面加入的字符，越显示在前面。在前面测试分布式同步的时候我们已经可以通过eventid全局地确定顺序了，那么全部子节点的顺序就可以通过eventid进行排序，越新的eventid",{"_index":61,"t":{"13":{"position":[[270,121]]}}}],["b",{"_index":57,"t":{"11":{"position":[[597,1],[601,1],[615,1]]},"15":{"position":[[232,1]]}}}],["bob",{"_index":21,"t":{"5":{"position":[[241,3],[326,3],[493,3],[553,3],[658,3]]},"9":{"position":[[17,3],[78,3],[150,3],[193,3],[288,3],[292,12],[520,3],[546,3],[574,3],[629,3],[643,3],[720,3],[831,3],[899,3],[1292,13]]},"11":{"position":[[8,3],[54,3],[78,3],[161,4],[190,3]]},"13":{"position":[[232,3]]},"17":{"position":[[41,3],[74,3]]}}}],["bob，alic",{"_index":79,"t":{"17":{"position":[[29,9]]}}}],["b删掉了，那么该怎么同步你要把d插入在b",{"_index":75,"t":{"15":{"position":[[443,42]]}}}],["b，但于此同时的你或者其他人仍可能在b后面输入一些字符，这也就是b",{"_index":76,"t":{"15":{"position":[[486,99]]}}}],["b，而你在b的后面输入了d",{"_index":74,"t":{"15":{"position":[[408,34]]}}}],["c",{"_index":58,"t":{"11":{"position":[[608,1]]},"15":{"position":[[274,1]]}}}],["client",{"_index":31,"t":{"9":{"position":[[375,69]]}}}],["client1和client2",{"_index":27,"t":{"7":{"position":[[54,39]]}}}],["client_id",{"_index":70,"t":{"15":{"position":[[211,10],[254,10],[296,10]]}}}],["clientid",{"_index":66,"t":{"15":{"position":[[122,10],[353,31]]}}}],["clientid基础上进行了扩展，构建了一个eventid，其中包括了clientid和lamport",{"_index":51,"t":{"9":{"position":[[1167,57]]}}}],["clientid是1",{"_index":64,"t":{"15":{"position":[[96,12]]}}}],["clientid是2",{"_index":65,"t":{"15":{"position":[[109,12]]}}}],["counter",{"_index":46,"t":{"9":{"position":[[1004,15],[1020,18],[1063,22],[1110,20]]},"15":{"position":[[328,10]]}}}],["crdt",{"_index":5,"t":{"3":{"position":[[73,5],[231,4]]},"5":{"position":[[3,5],[9,12],[45,5],[214,5],[262,38],[330,16],[421,4],[521,23],[568,4]]},"7":{"position":[[32,4]]},"9":{"position":[[126,15],[187,5],[220,25],[604,7]]},"15":{"position":[[133,4],[171,5],[748,5]]},"19":{"position":[[50,4],[61,4],[110,4]]}}}],["crdtcrdt",{"_index":25,"t":{"5":{"position":[[629,20]]}}}],["crdthello",{"_index":30,"t":{"9":{"position":[[177,9],[210,9],[594,9]]}}}],["crdthellocrdt或hello",{"_index":24,"t":{"5":{"position":[[609,19]]}}}],["crdts（conflict",{"_index":0,"t":{"3":{"position":[[0,23]]}}}],["crdt、hello",{"_index":23,"t":{"5":{"position":[[598,10]]}}}],["crdt和hello",{"_index":22,"t":{"5":{"position":[[510,10]]},"9":{"position":[[115,10]]}}}],["crdt，bob",{"_index":19,"t":{"5":{"position":[[196,8]]}}}],["d",{"_index":59,"t":{"11":{"position":[[626,1]]}}}],["data",{"_index":3,"t":{"3":{"position":[[40,4]]}}}],["defang",{"_index":84,"t":{"19":{"position":[[81,9]]}}}],["demo",{"_index":10,"t":{"3":{"position":[[135,5],[185,4]]},"7":{"position":[[49,4]]}}}],["edit",{"_index":81,"t":{"19":{"position":[[44,5]]}}}],["edit1",{"_index":14,"t":{"3":{"position":[[236,5]]}}}],["eventid",{"_index":56,"t":{"11":{"position":[[236,124]]}}}],["eventid(count",{"_index":68,"t":{"15":{"position":[[191,16],[234,16],[276,16]]}}}],["final",{"_index":28,"t":{"7":{"position":[[94,5]]}}}],["four",{"_index":40,"t":{"9":{"position":[[681,8],[803,14]]}}}],["fourthre",{"_index":41,"t":{"9":{"position":[[740,9]]}}}],["fourzero",{"_index":55,"t":{"11":{"position":[[152,8]]}}}],["four，正常来说on",{"_index":42,"t":{"9":{"position":[[780,12]]}}}],["free",{"_index":1,"t":{"3":{"position":[[24,4]]}}}],["hello",{"_index":18,"t":{"5":{"position":[[187,8],[205,8],[245,16],[497,12],[573,24]]},"9":{"position":[[109,5],[154,22],[197,12],[578,15]]}}}],["https://github.com/leeeon233/crdt",{"_index":11,"t":{"3":{"position":[[147,33]]}}}],["https://github.com/wangdashuaihenshuai/crdt",{"_index":80,"t":{"19":{"position":[[0,43]]}}}],["https://leonzhao.cn/crdt",{"_index":13,"t":{"3":{"position":[[194,24]]}}}],["id",{"_index":34,"t":{"9":{"position":[[486,2]]}}}],["id，以id",{"_index":32,"t":{"9":{"position":[[445,27]]}}}],["lamport",{"_index":43,"t":{"9":{"position":[[921,46],[978,7]]}}}],["max(count",{"_index":49,"t":{"9":{"position":[[1133,12]]}}}],["message.count",{"_index":50,"t":{"9":{"position":[[1146,16]]}}}],["on",{"_index":37,"t":{"9":{"position":[[647,7],[724,11],[758,11]]},"11":{"position":[[134,7]]}}}],["op",{"_index":26,"t":{"7":{"position":[[27,2],[151,55]]},"11":{"position":[[445,2]]},"15":{"position":[[179,3],[343,5],[385,2]]}}}],["op1",{"_index":71,"t":{"15":{"position":[[310,11],[349,3]]}}}],["op3",{"_index":72,"t":{"15":{"position":[[324,3]]}}}],["order",{"_index":85,"t":{"19":{"position":[[91,5]]}}}],["part",{"_index":83,"t":{"19":{"position":[[73,4]]}}}],["primer",{"_index":82,"t":{"19":{"position":[[66,6]]}}}],["replic",{"_index":2,"t":{"3":{"position":[[29,10]]}}}],["rga",{"_index":6,"t":{"3":{"position":[[79,14]]}}}],["root）的话，那么插入字符a就是a是root的子节点。在a后面插入b，那b就是a",{"_index":60,"t":{"13":{"position":[[0,76]]}}}],["rust+wasm",{"_index":8,"t":{"3":{"position":[[112,9]]}}}],["text的文本区域展示的当前同步后的结果。client1和client2",{"_index":29,"t":{"7":{"position":[[100,50]]}}}],["theori",{"_index":86,"t":{"19":{"position":[[97,7]]}}}],["three",{"_index":39,"t":{"9":{"position":[[671,9],[774,5],[797,5]]},"11":{"position":[[146,5]]}}}],["timestamp",{"_index":44,"t":{"9":{"position":[[968,9],[986,9],[1225,36]]}}}],["toy",{"_index":12,"t":{"3":{"position":[[181,3],[219,3]]}}}],["two",{"_index":38,"t":{"9":{"position":[[655,9],[736,3],[770,3],[793,3]]},"11":{"position":[[142,3]]}}}],["type",{"_index":4,"t":{"3":{"position":[[45,27]]}}}],["v0.4",{"_index":78,"t":{"17":{"position":[[7,4]]}}}],["v2.0",{"_index":33,"t":{"9":{"position":[[473,4]]}}}],["v3.0",{"_index":52,"t":{"9":{"position":[[1270,4]]},"11":{"position":[[15,4]]}}}],["web",{"_index":9,"t":{"3":{"position":[[126,3]]}}}],["zero",{"_index":53,"t":{"11":{"position":[[82,15],[166,7]]}}}],["zxch3n",{"_index":87,"t":{"19":{"position":[[118,7]]}}}]],"pipeline":["stemmer"]}}]