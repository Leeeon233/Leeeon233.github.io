<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>Leon Zhao Blog</title>
        <link>https://leonzhao.cn/blog</link>
        <description>Leon Zhao Blog</description>
        <lastBuildDate>Mon, 25 Jul 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>zh-Hans</language>
        <item>
            <title><![CDATA[如何使用CRDT实现一个简单的多人文本协同应用]]></title>
            <link>https://leonzhao.cn/blog/2022/07/25/crdt-toy</link>
            <guid>/2022/07/25/crdt-toy</guid>
            <pubDate>Mon, 25 Jul 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[这篇博客将简要介绍CRDTs（Conflict-free Replicated Data Types）的基本概念以及从开发者的角度着重介绍简单的CRDTs的实现流程与细节（基于RGA算法），并且基于这些知识点实现一个rust+wasm的简单web文本协作demo。]]></description>
            <content:encoded><![CDATA[<p>这篇博客将简要介绍<a href="https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type" target="_blank" rel="noopener noreferrer">CRDTs</a>（Conflict-free Replicated Data Types）的基本概念以及从开发者的角度着重介绍简单的CRDTs的实现流程与细节（基于<em>RGA算法</em>），并且基于这些知识点实现一个rust+wasm的简单web文本协作demo。</p><ul><li>项目地址: <a href="https://github.com/Leeeon233/crdt-toy" target="_blank" rel="noopener noreferrer">https://github.com/Leeeon233/crdt-toy</a></li><li>demo地址: <a href="https://leonzhao.cn/crdt-toy" target="_blank" rel="noopener noreferrer">https://leonzhao.cn/crdt-toy</a></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="什么是crdts">什么是CRDTs<a class="hash-link" href="#什么是crdts" title="标题的直接链接">​</a></h2><p>对于CRDTs可以优先通过看[<a href="https://www.zxch3n.com/crdt-intro/crdt-intro/" target="_blank" rel="noopener noreferrer">CRDT简介</a>]、[<a href="http://jtfmumm.com/blog/2015/11/17/crdt-primer-1-defanging-order-theory/" target="_blank" rel="noopener noreferrer">CRDT原理</a>]这些文章了解。</p><p>CRDTs是近些年开始备受关注的一种用来处理分布式系统上的协同可用性的数据结构。它在<code>可用性</code>与<code>分区容错性</code>的基础上，不提供<code>完美的一致性</code>而是提供<strong><code>强最终一致性</code></strong>。下面的例子可以帮助我们理解什么是<strong>强最终一致性</strong>。</p><p>比如当前有<strong>Alice</strong>和<strong>Bob</strong>两个同学在各自的电脑上共同编辑同一份文档，Alice写入了<code>Hello CRDT</code>，Bob写入了<code>Hello crdt</code>。</p><div></div><p>但在此时Alice其实并没有办法知晓Bob可能在同一时刻也写入了<code>Hello crdt</code>的文本，并不像真正本地那样，完全意义上的在<strong>编辑同一份文件</strong>（一致性）。</p><p>只有当他们进行了一次同步通信后，Alice或者Bob才会知晓对方编辑了什么。crdt所提供的<strong>强最终一致性</strong>意义并不是让多人协同真正地像大家就在同一页纸上写字一样，而是大家可以各自地编辑自己的内容，尽管在多次同步的过程中会产生冲突，但crdt可以保证所有的消息都被接收后，<strong>最终的内容</strong>将会是多方一致的，哪怕可能最终冲突解决后的版本并不是真正所期待的结果。</p><div></div><p>对于Alice和Bob的例子，在输入<code>Hello CRDT</code>和<code>Hello crdt</code>时可能进行了多次的同步操作，最终展现在Alice和Bob眼前的文本根据不同的crdt算法和冲突解决策略可能变得不同。也许是<code>Hello crdt</code>、<code>Hello CRDTHellocrdt</code>或<code>Hello CRDTcrdt</code>等等都有可能，但是最终在Alice和Bob眼前的结果将会是完全一致的其中一种结果。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="crdts的简单实现">CRDTs的简单实现<a class="hash-link" href="#crdts的简单实现" title="标题的直接链接">​</a></h2><p>我们就以多人的文本内容协作作为场景来尝试实现一个基于op的crdt的编辑器。下面是编辑器demo的效果展示。分别有<code>Client1</code>和<code>Client2</code>两个客户端在共同编辑一份文档。
<strong>Final Text</strong>的文本区域展示的当前同步后的结果。<code>Client1</code>和<code>Client2</code>也可以点击按钮表示进行同步。</p><iframe src="https://leonzhao.cn/crdt-toy" width="860" height="840"></iframe><p>首先我们需要确定这样一个简单的编辑器，用户会有哪些操作(op)。思考一下，非常简单地就可以得出一共有两种操作：</p><ul><li>插入</li><li>删除</li><li><del>修改</del>（可以简单地视为先删除再插入的组合）</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="分布式中的顺序">分布式中的顺序<a class="hash-link" href="#分布式中的顺序" title="标题的直接链接">​</a></h3><p>那么我们还是回到Alice和Bob的例子，我们提供了第一版的编辑器给他们，但是由于我们技术还未成熟，要求他们只能插入内容还不能删除。Alice和Bob同意参与到我们的迭代测试中去。他们还是分别一次输入了
<code>Hello CRDT</code>和<code>Hello crdt</code>。这时他们发起了同步。</p><div></div><p>Alice给Bob打了个电话，发现自己的屏幕上结果是<code>Hello CRDTHello crdt</code>而Bob的屏幕上结果是<code>Hello crdtHello CRDT</code>。怎么会这样？他们把测试结果反馈给了我们。</p><p>原来我们第一版系统都把新接收到的<strong>插入操作</strong>当作了后发生的事情，Alice的编辑器把Bob的内容加在了后面，Bob的编辑器也是如此。这和我们一开始所强调的<strong>强最终一致性</strong>可不符。我们希望无论事件被怎样创建和接收，只要操作集合是一致的，那么最终结果应该一样。</p><p>既然已经知道了问题所在，那么就没什么问题了。我们只需要让每个用户之间有一个固定的顺序就可以了，可以为每一个编辑器客户端分配一个<code>Client ID</code>，以<strong>ID</strong>的大小顺序来作为操作的顺序。我们很快发布了v2.0版本，让客户端ID越大认为操作越先发生，并且分配</p><ul><li>Alice的客户端版本为<code>1</code></li><li>Bob的客户端版本为<code>2</code></li></ul><p>提供给了Alice和Bob帮忙测试使用。</p><div></div><p>这回没有问题了，Alice和Bob的编辑器上显示的都是<code>Hello crdtHello CRDT</code>文本。</p><p>但随着进一步使用，Alice和Bob又发现问题了。这次</p><ul><li>Bob 先输入了<code>one </code>然后又输入了<code>two</code></li><li>Alice先输入了<code>three </code>又输入了<code>four</code></li></ul><p>然后他们进行了同步，这次每个人都<strong>发送了两个插入操作</strong>。</p><div></div><p>现在Bob的屏幕上显示的是<code>one two fourthree </code>而Alice屏幕上显示的却是<code>one two three four</code>，正常来说<code>one two three four</code>才是他们想要的结果。</p><p>我们发现Alice向Bob同步的内容发生了顺序的改变，有着分布式经验的我们立刻想到，可能是网络延迟的原因，导致Alice的第二个操作早于第一个操作被Bob的客户端接收到造成了顺序的不一致。</p><p>既然已经知道了问题所在，那么就没什么问题了。我们可以新增一个逻辑时间戳，也就是<a href="https://en.wikipedia.org/wiki/Lamport_timestamp" target="_blank" rel="noopener noreferrer">Lamport Timestamp</a></p><blockquote><p>Lamport Timestamp 的算法很简单<sup id="fnref-1-c8683f"><a href="#fn-1-c8683f" class="footnote-ref">1</a></sup></p><ul><li>每个进程维护一个<code>counter</code></li><li>本地每发生一个事件就将<code>counter + 1</code>，并将事件的时间戳设置为<code>counter</code>值</li><li>每当进程发送一个消息，就将本地<code>counter + 1</code>，并将最新的<code>counter</code>值附带在消息上</li><li>当进程收到消息后，让自己的<code>counter = max(counter, message.counter) + 1</code></li></ul></blockquote><p>我们在原有的<code>ClientId</code>基础上进行了扩展，构建了一个<code>EventId</code>，其中包括了<code>ClientId</code>和<code>Lamport Timestamp</code>两部分，这样事件的发生顺序就可以与接收到的顺序无关了。</p><p>我们抓紧更新了v3.0版本的编辑器给到Alice和Bob，心想肯定没问题了。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="只确定逻辑顺序就够了吗">只确定逻辑顺序就够了吗<a class="hash-link" href="#只确定逻辑顺序就够了吗" title="标题的直接链接">​</a></h3><div class="footnotes"><hr><ol><li id="fn-1-c8683f"><a href="https://www.zxch3n.com/crdt-intro/design-crdt" target="_blank" rel="noopener noreferrer">如何设计 CRDT 算法-Zxch3n</a><a href="#fnref-1-c8683f" class="footnote-backref">↩</a></li></ol></div>]]></content:encoded>
            <category>crdt</category>
            <category>rust</category>
            <category>webassembly</category>
            <category>editor</category>
        </item>
    </channel>
</rss>