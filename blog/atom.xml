<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://leonzhao.cn/blog</id>
    <title>Leon Zhao Blog</title>
    <updated>2022-07-07T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://leonzhao.cn/blog"/>
    <subtitle>Leon Zhao Blog</subtitle>
    <icon>https://leonzhao.cn/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[如何使用CRDT实现一个简单的多人文本协同应用]]></title>
        <id>/2022/07/07/crdt-toy</id>
        <link href="https://leonzhao.cn/blog/2022/07/07/crdt-toy"/>
        <updated>2022-07-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[这篇博客将简要介绍CRDTs（Conflict-free Replicated Data Types）的基本概念以及从开发者的角度着重介绍简单的CRDTs的实现（基于RGA算法）流程与细节，并且基于这些知识点实现一个rust+wasm的简单web文本协作demo。]]></summary>
        <content type="html"><![CDATA[<p>这篇博客将简要介绍<a href="https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type" target="_blank" rel="noopener noreferrer">CRDTs</a>（Conflict-free Replicated Data Types）的基本概念以及从开发者的角度着重介绍简单的CRDTs的实现（基于<em>RGA算法</em>）流程与细节，并且基于这些知识点实现一个rust+wasm的简单web文本协作demo。</p><ul><li>项目地址: <a href="https://github.com/Leeeon233/crdt-toy" target="_blank" rel="noopener noreferrer">https://github.com/Leeeon233/crdt-toy</a></li><li>demo地址: <a href="https://leonzhao.cn/crdt-toy" target="_blank" rel="noopener noreferrer">https://leonzhao.cn/crdt-toy</a></li></ul><h1>什么是CRDTs</h1><p>对于CRDTs可以优先通过看[<a href="https://www.zxch3n.com/crdt-intro/crdt-intro/" target="_blank" rel="noopener noreferrer">CRDT简介</a>]、[<a href="http://jtfmumm.com/blog/2015/11/17/crdt-primer-1-defanging-order-theory/" target="_blank" rel="noopener noreferrer">CRDT原理</a>]这些文章了解。</p><p>CRDTs是近些年开始备受关注的一种用来处理分布式系统上的协同可用性的数据结构。它在<code>可用性</code>与<code>分区容错性</code>的基础上，不提供<code>完美的一致性</code>而是提供<strong><code>强最终一致性</code></strong>。下面的例子可以帮助我们理解什么是<strong>强最终一致性</strong>。</p><p>比如当前有<strong>Alice</strong>和<strong>Bob</strong>两个同学在各自的电脑上共同编辑同一份文档，Alice写入了<code>Hello CRDT</code>，Bob写入了<code>Hello crdt</code>。</p><div></div><p>但在此时Alice其实并没有办法知晓Bob可能在同一时刻也写入了<code>Hello crdt</code>的文本，而不是就像真正本地那样，完全意义上的在<strong>编辑同一份文件</strong>（一致性）。</p><p>只有当他们进行了一次同步通信后，Alice或者Bob才会知晓对方编辑了什么。crdt所提供的<strong>强最终一致性</strong>意义并不是让多人协同真正地像大家就在同一页纸上写字一样，而是大家可以各自地编辑自己的内容，尽管在多次同步的过程中会产生冲突，但crdt可以保证所有的消息都被接收后，<strong>最终的内容</strong>将会是多方一致的，哪怕可能最终冲突解决后的版本并不是真正所期待的结果。</p><div></div><p>对于Alice和Bob的例子，在输入<code>Hello CRDT</code>和<code>Hello crdt</code>时可能进行了多次的同步操作，最终展现在Alice和Bob眼前的文本根据不同的crdt算法和冲突解决策略可能变得不同。也许是<code>Hello crdt</code>、<code>Hello CRDTHellocrdt</code>或<code>Hello CRDTcrdt</code>等等都有可能，但是最终在Alice和Bob眼前的结果将会是完全一致的其中一种结果。</p><h1>未完</h1>]]></content>
        <author>
            <name>Leon Zhao</name>
            <uri>https://github.com/Leeeon233</uri>
        </author>
        <category label="crdt" term="crdt"/>
        <category label="rust" term="rust"/>
        <category label="webassembly" term="webassembly"/>
        <category label="editor" term="editor"/>
    </entry>
</feed>