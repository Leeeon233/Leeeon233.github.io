<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://leonzhao.cn/blog</id>
    <title>Leon Zhao Blog</title>
    <updated>2022-07-25T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://leonzhao.cn/blog"/>
    <subtitle>Leon Zhao Blog</subtitle>
    <icon>https://leonzhao.cn/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[如何使用CRDT实现一个简单的多人文本协同应用]]></title>
        <id>/2022/07/25/crdt-toy</id>
        <link href="https://leonzhao.cn/blog/2022/07/25/crdt-toy"/>
        <updated>2022-07-25T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[CRDTs实现多人文本协作教程，包括crdts基本原理，多个例子不断渐进式改进crdt编辑器]]></summary>
        <content type="html"><![CDATA[<p>这篇博客将简要介绍<a href="https://en.wikipedia.org/wiki/Conflict-free_replicated_data_type" target="_blank" rel="noopener noreferrer">CRDTs</a>（Conflict-free Replicated Data Types）的基本概念以及从开发者的角度着重介绍简单的 CRDTs 的实现流程与细节（基于<em>RGA 算法</em>），并且基于这些知识点实现一个 rust+wasm 的简单 web 文本协作 demo。</p><ul><li>项目地址: <a href="https://github.com/Leeeon233/crdt-toy" target="_blank" rel="noopener noreferrer">https://github.com/Leeeon233/crdt-toy</a></li><li>demo 地址: <a href="https://leonzhao.cn/crdt-toy" target="_blank" rel="noopener noreferrer">https://leonzhao.cn/crdt-toy</a></li></ul><p>实现思路参考了 crdt-edit<sup id="fnref-1-c8683f"><a href="#fn-1-c8683f" class="footnote-ref">1</a></sup></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="什么是-crdts">什么是 CRDTs<a class="hash-link" href="#什么是-crdts" title="标题的直接链接">​</a></h2><p>对于 CRDTs 可以优先通过看[<a href="https://www.zxch3n.com/crdt-intro/crdt-intro/" target="_blank" rel="noopener noreferrer">CRDT 简介<sup id="fnref-2-c8683f"></sup></a><a href="#fn-2-c8683f" class="footnote-ref">2</a>]、[<a href="http://jtfmumm.com/blog/2015/11/17/crdt-primer-1-defanging-order-theory/" target="_blank" rel="noopener noreferrer">CRDT 原理<sup id="fnref-3-c8683f"></sup></a><a href="#fn-3-c8683f" class="footnote-ref">3</a>]这些文章了解。</p><p>CRDTs 是近些年开始备受关注的一种用来处理分布式系统上的协同可用性的数据结构。它在<code>可用性</code>与<code>分区容错性</code>的基础上，不提供<code>完美的一致性</code>而是提供<strong><code>强最终一致性</code></strong>。下面的例子可以帮助我们理解什么是<strong>强最终一致性</strong>。</p><p>比如当前有<strong>Alice</strong>和<strong>Bob</strong>两个同学在各自的电脑上共同编辑同一份文档，Alice 写入了<code>Hello CRDT</code>，Bob 写入了<code>Hello crdt</code>。</p><div></div><p>但在此时 Alice 其实并没有办法知晓 Bob 可能在同一时刻也写入了<code>Hello crdt</code>的文本，并不像真正本地那样，完全意义上的在<strong>编辑同一份文件</strong>（一致性）。</p><p>只有当他们进行了一次同步通信后，Alice 或者 Bob 才会知晓对方编辑了什么。crdt 所提供的<strong>强最终一致性</strong>意义并不是让多人协同真正地像大家就在同一页纸上写字一样，而是大家可以各自地编辑自己的内容，尽管在多次同步的过程中会产生冲突，但 crdt 可以保证所有的消息都被接收后，<strong>最终的内容</strong>将会是多方一致的，哪怕可能最终冲突解决后的版本并不是真正所期待的结果。</p><div></div><p>对于 Alice 和 Bob 的例子，在输入<code>Hello CRDT</code>和<code>Hello crdt</code>时可能进行了多次的同步操作，最终展现在 Alice 和 Bob 眼前的文本根据不同的 crdt 算法和冲突解决策略可能变得不同。也许是<code>Hello crdt</code>、<code>Hello CRDTHellocrdt</code>或<code>Hello CRDTcrdt</code>等等都有可能，但是最终在 Alice 和 Bob 眼前的结果将会是完全一致的其中一种结果。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="crdts-的简单实现">CRDTs 的简单实现<a class="hash-link" href="#crdts-的简单实现" title="标题的直接链接">​</a></h2><p>我们就以多人的文本内容协作作为场景来尝试实现一个基于 op 的 crdt 的编辑器。下面是编辑器 demo 的效果展示。分别有<code>Client1</code>和<code>Client2</code>两个客户端在共同编辑一份文档。
<strong>Final Text</strong>的文本区域展示的当前同步后的结果。<code>Client1</code>和<code>Client2</code>也可以点击按钮表示进行同步。</p><iframe src="https://leonzhao.cn/crdt-toy" width="860" height="840"></iframe><p>首先我们需要确定这样一个简单的编辑器，用户会有哪些操作(op)。思考一下，非常简单地就可以得出一共有两种操作：</p><ul><li>插入</li><li>删除</li><li><del>修改</del>（可以简单地视为先删除再插入的组合）</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="分布式中的顺序">分布式中的顺序<a class="hash-link" href="#分布式中的顺序" title="标题的直接链接">​</a></h3><p>那么我们还是回到 Alice 和 Bob 的例子，我们提供了第一版的编辑器给他们，但是由于我们技术还未成熟，要求他们只能插入内容还不能删除。Alice 和 Bob 同意参与到我们的迭代测试中去。他们还是分别一次输入了
<code>Hello CRDT</code>和<code>Hello crdt</code>。这时他们发起了同步。</p><div></div><p>Alice 给 Bob 打了个电话，发现自己的屏幕上结果是<code>Hello CRDTHello crdt</code>而 Bob 的屏幕上结果是<code>Hello crdtHello CRDT</code>。怎么会这样？他们把测试结果反馈给了我们。</p><p>原来我们第一版系统都把新接收到的<strong>插入操作</strong>当作了后发生的事情，Alice 的编辑器把 Bob 的内容加在了后面，Bob 的编辑器也是如此。这和我们一开始所强调的<strong>强最终一致性</strong>可不符。我们希望无论事件被怎样创建和接收，只要操作集合是一致的，那么最终结果应该一样。</p><p>既然已经知道了问题所在，那么就没什么问题了。我们只需要让每个用户之间有一个固定的顺序就可以了，可以为每一个编辑器客户端分配一个<code>Client ID</code>，以<strong>ID</strong>的大小顺序来作为操作的顺序。我们很快发布了 v2.0 版本，让客户端 ID 越大认为操作越先发生，并且分配</p><ul><li>Alice 的客户端版本为<code>1</code></li><li>Bob 的客户端版本为<code>2</code></li></ul><p>提供给了 Alice 和 Bob 帮忙测试使用。</p><div></div><p>这回没有问题了，Alice 和 Bob 的编辑器上显示的都是<code>Hello crdtHello CRDT</code>文本。</p><p>但随着进一步使用，Alice 和 Bob 又发现问题了。这次</p><ul><li>Bob 先输入了<code>one </code>然后又输入了<code>two</code></li><li>Alice 先输入了<code>three </code>又输入了<code>four</code></li></ul><p>然后他们进行了同步，这次每个人都<strong>发送了两个插入操作</strong>。</p><div></div><p>现在 Bob 的屏幕上显示的是<code>one two fourthree </code>而 Alice 屏幕上显示的却是<code>one two three four</code>，正常来说<code>one two three four</code>才是他们想要的结果。</p><p>我们发现 Alice 向 Bob 同步的内容发生了顺序的改变，有着分布式经验的我们立刻想到，可能是网络延迟的原因，导致 Alice 的第二个操作早于第一个操作被 Bob 的客户端接收到造成了顺序的不一致。</p><p>既然已经知道了问题所在，那么就没什么问题了。我们可以新增一个逻辑时间戳，也就是<a href="https://en.wikipedia.org/wiki/Lamport_timestamp" target="_blank" rel="noopener noreferrer">Lamport Timestamp</a></p><blockquote><p>Lamport Timestamp 的算法很简单<sup id="fnref-4-c8683f"><a href="#fn-4-c8683f" class="footnote-ref">4</a></sup></p><ul><li>每个进程维护一个<code>counter</code></li><li>本地每发生一个事件就将<code>counter + 1</code>，并将事件的时间戳设置为<code>counter</code>值</li><li>每当进程发送一个消息，就将本地<code>counter + 1</code>，并将最新的<code>counter</code>值附带在消息上</li><li>当进程收到消息后，让自己的<code>counter = max(counter, message.counter) + 1</code></li></ul></blockquote><p>我们在原有的<code>ClientId</code>基础上进行了扩展，构建了一个<code>EventId</code>，其中包括了<code>ClientId</code>和<code>Lamport Timestamp</code>两部分，这样事件的发生顺序就可以与接收到的顺序无关了。</p><p>我们抓紧更新了 v3.0 版本的编辑器给到 Alice 和 Bob，心想肯定没问题了。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="只确定逻辑顺序就够了吗">只确定逻辑顺序就够了吗<a class="hash-link" href="#只确定逻辑顺序就够了吗" title="标题的直接链接">​</a></h3><p>Alice 和 Bob 拿到 v3.0 的编辑器那肯定先尝试了一下刚刚失败的例子</p><div></div><p>果然更新后就没问题了。但 Bob 这回想着也不能一直只在后面加字符，于是 Bob 在编辑器的最前面插入了<code>zero </code>，并且同步给了 Alice。发现同步之后结果怎么又不一样了。Alice 的结果是<code>one two three fourzero </code>，Bob 输入的<code>zero </code>怎么在后面啊？</p><div></div><p>Alice 和 Bob 开始不耐烦了起来，你们这个编辑器到底行不行？我们听到这个消息，赶快赶过来了解情况。</p><p>之前我们给每个插入操作分配了一个<code>EventId</code>，能够确定所有的插入操作的发生顺序。但是我们没有想到操作的顺序在文本这个场景下不能代表操作的位置。我们觉得不能再这样遇到什么问题解决什么问题了，需要好好想清楚编辑器这个问题，包括一直没被考虑的<strong>删除</strong>操作。</p><p>目前我们一共面临下面几个问题：</p><ul><li>文本的插入和删除操作是需要确定插入和删除位置的，该如何确定</li><li>文本可能在任意的位置进行插入和删除，我们应该需要确定操作的最小单位</li><li>简单的 Op 列表可能不太容易满足我们的要求了，该使用怎样的数据结构呢</li></ul><p>面临的问题还有些抽象，我们先通过一部分的例子来模拟一下吧。</p><div></div><p>看到上面的图，我们的思路就清晰了很多。文本编辑里面最小操作的单位肯定是<strong><code>字符</code></strong>这点毋庸置疑了。至于确定位置这点，我们观察图中第一排的全部操作描述</p><ul><li>在编辑器中插入 a</li><li>在 a 后面输入 b</li><li>在 b 后面输入 c</li><li>删除字符 b</li><li>在 a 后面插入 d</li></ul><p>那么位置就完全可以通过当前文本内容，看接下来要插入或者删除的字符是<em>基于</em>目前文本的哪个字符做的操作就可以确定了。这样不同的字符之间好像就有了依赖关系，那数据结构是不是可以使用树形结构了？</p><p>我们突然感觉灵感来了。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="文本编辑好像就是棵树">文本编辑好像就是棵树<a class="hash-link" href="#文本编辑好像就是棵树" title="标题的直接链接">​</a></h3><p>如果我们把初始空文本当作树的根节点（root）的话，那么插入字符<code>a</code>就是<code>a</code>是<code>root</code>的子节点。在<code>a</code>后面插入<code>b</code>，那<code>b</code>就是<code>a</code>的子节点。我们把上面的示例画一下：</p><div></div><p>把输入字符的过程可视化之后，我们看到过程 1 和 2 好像都没什么问题，全部都是在按顺序插入字符，前一个字符作为后一个字符的父节点，从根节点遍历下来就能还原原始文档。但是接下来我们好像遇到两个不是太明朗的操作。</p><ul><li>多个子节点时遍历顺序是否有要求</li><li>删除字符时是否要把节点删除</li></ul><p>这回实在不好意思再请 Alice 和 Bob 帮我们找问题了，就我和你来自己先多测测吧。第一个问题看起来还算简单</p><div></div><p>我们不断模拟向<code>a</code>后面加入文本，结果都是越后面加入的字符，越显示在前面。在前面测试分布式同步的时候我们已经可以通过<code>EventId</code>全局地确定顺序了，那么全部子节点的顺序就可以通过<code>EventId</code>进行排序，越<em>新</em>的<code>EventId</code>将在子节点中越早被遍历。</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="删除了字符它就不存在了吗">删除了字符，它就不存在了吗？<a class="hash-link" href="#删除了字符它就不存在了吗" title="标题的直接链接">​</a></h3><p>接着我们模拟了几次协作时删除字符的情况，比如这次我先输入了<code>ab</code>你输入了<code>c</code>，之后我们进行了一次同步，我们的结果最后都是<code>abc</code>。</p><details class="details_lb9f alert alert--info details_b_Ee" data-collapsed="true"><summary>你可能会有疑问，为什么是<code>abc</code>，而不是<code>cab</code>？</summary><div><div class="collapsibleContent_i85q"><p>这里我们使用假设</p><ul><li>你的<code>ClientId</code>是<code>1</code></li><li>我的<code>ClientId</code>是<code>2</code></li><li><code>ClientId</code>越大 crdt 认为越先发生</li></ul><p>我们详细看一下<code>abc</code>的合并过程，现在我收到了全部的 crdts 的 op：</p><ol><li>根节点插入 <code>a</code> EventId(counter: 0, client_id: 2)</li><li><code>a</code> 节点插入 <code>b</code> EventId(counter: 1, client_id: 2)</li><li>根节点插入 <code>c</code> EventId(counter: 0, client_id: 1)</li></ol><p>根据刚刚的结论，op1 和 op3 都是<code>counter</code>为 0 的 op，但是 op1 的<code>ClientId</code>更大，在假设前提下会被认为优先发生。那么整个 op 顺序就会变成 132，即结果的<code>abc</code>。</p></div></div></details><p>紧接着我删除了<code>b</code>，而你在<code>b</code>的后面输入了<code>d</code>，然后我们都发起了同步请求。</p><div></div><p>现在好像遇到了问题，我都已经把<code>b</code>删掉了，那么该怎么同步你要把<code>d</code>插入在<code>b</code>后面的操作呢？</p><p>我静静地整理了一下思路，我删除了<code>b</code>，但于此同时的你或者其他人仍可能在<code>b</code>后面输入一些字符，这也就是<code>b</code>仍可能是其他子树的父节点。其他节点仍然可能会依赖于它。所以我们在删除操作时不可能将真正的树节点删除。</p><p>再来想想文本展示时，就是一个树的遍历过程。只要不在编辑器上显示这个字符那么使用编辑器的用户就完全可以认为这个字符被删除了。所以我们只需要给每个节点增加一个<code>标志</code>，表示这个节点是不是被删除就可以了。</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>提示</div><div class="admonitionContent_S0QG"><p>上面提到的为了保留树的完整结构，不删除节点，而是添加标志的方式就是一种<a href="https://baike.baidu.com/item/%E5%A2%93%E7%A2%91%E6%9C%BA%E5%88%B6/7558924" target="_blank" rel="noopener noreferrer">墓碑机制</a></p></div></div><p>现在我们编辑器的结果就都会是<code>adc</code>，满足 crdts 所要求的<code>强最终一致性</code>。我们来遍历一遍刚刚所形成的文本树：</p><div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="crdts-能够达成多人的操作协同那么代价呢">CRDTs 能够达成多人的操作协同，那么代价呢？<a class="hash-link" href="#crdts-能够达成多人的操作协同那么代价呢" title="标题的直接链接">​</a></h2><p>我们把最终的 v0.4 版本编辑器给到了 Alice 和 Bob，Alice 和 Bob 会有什么反馈呢？</p><p>我们来等待下一篇，看看 Alice 和 Bob 会不会有什么抱怨。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="参考资料">参考资料<a class="hash-link" href="#参考资料" title="标题的直接链接">​</a></h2><div class="footnotes"><hr><ol><li id="fn-1-c8683f"><a href="https://github.com/wangdashuaihenshuai/crdt-edit" target="_blank" rel="noopener noreferrer">https://github.com/wangdashuaihenshuai/crdt-edit</a><a href="#fnref-1-c8683f" class="footnote-backref">↩</a></li><li id="fn-2-c8683f"><a href="https://www.zxch3n.com/crdt-intro/crdt-intro/" target="_blank" rel="noopener noreferrer">CRDT 简介</a><a href="#fnref-2-c8683f" class="footnote-backref">↩</a></li><li id="fn-3-c8683f"><a href="http://jtfmumm.com/blog/2015/11/17/crdt-primer-1-defanging-order-theory/" target="_blank" rel="noopener noreferrer">A CRDT Primer Part I: Defanging Order Theory</a><a href="#fnref-3-c8683f" class="footnote-backref">↩</a></li><li id="fn-4-c8683f"><a href="https://www.zxch3n.com/crdt-intro/design-crdt" target="_blank" rel="noopener noreferrer">如何设计 CRDT 算法-Zxch3n</a><a href="#fnref-4-c8683f" class="footnote-backref">↩</a></li></ol></div>]]></content>
        <author>
            <name>Leon Zhao</name>
            <uri>https://github.com/Leeeon233</uri>
        </author>
        <category label="crdt" term="crdt"/>
        <category label="rust" term="rust"/>
        <category label="webassembly" term="webassembly"/>
        <category label="editor" term="editor"/>
    </entry>
</feed>